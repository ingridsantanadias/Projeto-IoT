#include <WiFi.h>
#include <HTTPClient.h>
#define D25 25

int sensorValor = D25;
int leitura;

const char* SSID = "SEU_SSID"; // Nome da rede
const char* PASSWORD = "SUA_SENHA"; // Senha da rede

//Configurações do ThingSpeak
const char* THINGSPEAK_API_KEY = "EK2M8D6JGL4O3XW2";
const char* THINGSPEAK_HOST = "https://thingspeak.mathworks.com/";//nome do site
const int THINGSPEAK_PORT = 80 ;//porta padraoo HTTP 
const char* THINGSPEAK_URL_BASE = "https://api.thingspeak.com/update";
const unsigned long INTERVALO_ENVIO_MS = 15000; // 15 segundos entre envios
unsigned long ultimoEnvio = 0; // Para controle do tempo

double calc_NTU(double volt);
double NTU = 0.0;

//Funçõa de conexao wi-fi
void conecta_wifi() {
  Serial.print("Conectando a ");
  Serial.println(SSID);

  WiFi.begin(SSID, PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  } 
  Serial.println("Conectado ao Wi-Fi!");
}

//Função para o envio dos dados
void envia_dado(double ntu_valor) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Wi-Fi desconectado. Tentando reconectar...");
    conecta_wifi();
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("Falha ao reconectar ao Wi-Fi. Pulando envio.");
      return;
    }
  }
HTTPClient http;
  
  // Cria a URL completa para o ThingSpeak:
  // /update?api_key=SEU_KEY&field1=VALOR
  String url = String(THINGSPEAK_URL_BASE) +
               "?api_key=" + THINGSPEAK_API_KEY +
               "&field1=" + String(ntu_valor, 2); // Envia o valor NTU com 2 casas decimais

  Serial.print("URL de envio: ");
  Serial.println(url);

  http.begin(THINGSPEAK_HOST, THINGSPEAK_PORT, url); // Configura o cabeçalho do pedido

  int httpCode = http.GET(); // Faz a requisição HTTP GET

  if (httpCode ==200) { // Se o código HTTP for positivo 
    Serial.printf("Código HTTP: %d\n", httpCode);
    if (httpCode == HTTP_CODE_OK) { // HTTP_CODE_OK é 200
      String payload = http.getString();
      Serial.println("Dado enviado com sucesso! Resposta: " + payload);
    } else {
      Serial.printf("Erro ao enviar dado: %d\n", httpCode);
    }
  } else {
    Serial.printf("Erro na requisição: %s\n", http.errorToString(httpCode).c_str());
  }

  http.end(); // Fecha a conexão
}

void setup() {
  Serial.begin(115200);
  conecta_wifi();
}

void loop() {
   leitura = analogRead (sensorValor); 
   double  voltage = sensorValor *(5.0 / 1024.0); 

   NTU = calc_NTU(voltage);

   Serial.print("Valor lido:"); // Imprime o valor 
   Serial.println(NTU); // manda o valor da leitura para o monitor serial
   delay(900); //Intervalo de 0,9 milisegundos entre as  leituras 
   Serial.print("Estado da água: ");
    if(NTU > 5.0){
      Serial.println("Suja");
    } else if (NTU>1.0)   {
      Serial.print("Pouco suja");
    } else{
       Serial.print("Limpa");
    }
     // Lógica de Envio de Dados 
    unsigned long tempoAtual = millis();
    if (tempoAtual - ultimoEnvio >= INTERVALO_ENVIO_MS) {
     envia_dado(NTU);
     ultimoEnvio = tempoAtual;
  }
delay(900);
}

double calc_NTU(double volt)
{
  double NTU_val;
  NTU_val = -1120,4*volt*volt +5743,3*volt - 4352.9;
  
  return NTU_val;
}
