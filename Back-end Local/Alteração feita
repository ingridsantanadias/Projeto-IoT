#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiMulti.h>

WiFiMulti wifiMulti;

#define SENSOR_PIN 34

const char* THINGSPEAK_API_KEY = "EK2M8D6JGL4O3XW2";
const char* THINGSPEAK_HOST = "api.thingspeak.com";
const int THINGSPEAK_PORT = 80;
const unsigned long INTERVALO_ENVIO_MS = 15000;
unsigned long ultimoEnvio = 0;

double calc_NTU(double volt);
double NTU = 0.0;

void setup_wifi_networks() {
  wifiMulti.addAP("devdavidwifi", "trabalhoti");
  wifiMulti.addAP("FAMILIA SANTANA_2G", "Sqn@bsb113");
  wifiMulti.addAP("Ingrid rede", "1234567i");
}

void conecta_wifi() {
  Serial.println("Iniciando conexão Wi-Fi...");
  int tentativas = 0;
  while (wifiMulti.run(10000) != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
    tentativas++;
    if (tentativas > 5) {
      Serial.println("\nFalha ao conectar. Reiniciando...");
      ESP.restart();
    }
  }
  Serial.println("\nWi-Fi conectado!");
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
}

void envia_dado(double ntu_valor) {
  if (wifiMulti.run() != WL_CONNECTED) {
    Serial.println("Wi-Fi desconectado, tentando reconectar...");
    conecta_wifi();
  }

  HTTPClient http;
  String url = "/update?api_key=" + String(THINGSPEAK_API_KEY) + "&field1=" + String(ntu_valor, 2);

  Serial.print("URL de envio: ");
  Serial.println(url);

  http.begin(THINGSPEAK_HOST, THINGSPEAK_PORT, url);
  int httpCode = http.GET();

  if (httpCode > 0) {
    Serial.printf("HTTP Code: %d\n", httpCode);
    if (httpCode == HTTP_CODE_OK) {
      Serial.println("Dado enviado com sucesso!");
    }
  } else {
    Serial.printf("Erro HTTP: %s\n", http.errorToString(httpCode).c_str());
  }
  http.end();
}

void setup() {
  Serial.begin(115200);
  setup_wifi_networks();
  conecta_wifi();
}

void loop() {
  wifiMulti.run();

  int leitura = analogRead(SENSOR_PIN);
  double voltage = leitura * (3.3 / 4095.0);
  NTU = calc_NTU(voltage);

Serial.print("Leitura bruta: ");
Serial.println(leitura);
Serial.print("Tensão (V): ");
Serial.println(voltage);

  Serial.print("Leitura NTU: ");
  Serial.println(NTU);
    if(NTU > 5.0){
      Serial.println("Suja");
    } else if (NTU > 1.0)   {
      Serial.print("Pouco suja");
    } else{
       Serial.print("Limpa");
    }

  unsigned long tempoAtual = millis();
  if (tempoAtual - ultimoEnvio >= INTERVALO_ENVIO_MS) {
    envia_dado(NTU);
    ultimoEnvio = tempoAtual;
  }

  delay(1000);
}

double calc_NTU(double volt) {
  return -1120.4 * volt * volt + 5743.3 * volt - 4352.9;
}
